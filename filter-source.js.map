{"version":3,"file":"filter-source.js","sourceRoot":"","sources":["src/filter-source.ts"],"names":[],"mappings":"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","sourcesContent":["import '@polymer/paper-checkbox/paper-checkbox.js';\n\nimport {PaperCheckboxElement} from '@polymer/paper-checkbox/paper-checkbox.js';\n\nimport {LitElement, TemplateResult, html, css, nothing} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\nexport interface FilterSource {\n    header: string;\n    filters: Filter[];\n}\n\nexport interface Filter {\n    label: string;\n    tag: string;\n    options: Filter[];\n    checked: boolean;\n}\n\nexport enum FilterEvent {\n    CHECKED_CHANGED='checked-changed',\n}\n\n@customElement('filter-source')\nexport class FilterSourceElement extends LitElement {\n    static override styles = css`\n\n        h4 {\n            margin-left: 5px;\n        }\n\n        ul {\n            padding-inline-start: 25px;\n        }\n\n        li {\n            list-style: none;\n            margin: 10px 0;\n        }\n    `;\n\n    @property({type: String}) header = \"\";\n    @property({type: Array}) filters: Filter[] = [];\n    @property({type: Object}) disableTags = new Set<string>();\n\n    override render() {\n        return html`\n            <h4>${this.header}</h4>\n            ${this.renderFilters(this.filters)}\n        `;\n    }\n\n    renderFilters(filters: Filter[], level=0): TemplateResult| typeof nothing {\n        if (!filters.length) {\n            return nothing;\n        }\n        const filterList = filters.map((filter) => {\n            if (filter.options.length) {\n                return html`\n                        <paper-checkbox\n                            ?disabled=\"${this.disableTags.has(filter.tag)}\"\n                            ?checked=\"${filter.checked}\"\n                            @checked-changed=\"${this.updateFilter(filter)}\">\n                            ${filter.label}\n                        </paper-checkbox>\n                        ${this.renderFilters(filter.options, level+1)}\n                    </details>`;\n            } else {\n                return html`\n                    <paper-checkbox\n                        ?disabled=\"${this.disableTags.has(filter.tag)}\"\n                        ?checked=\"${filter.checked}\"\n                        @checked-changed=\"${this.updateFilter(filter)}\">\n                        ${filter.label}\n                    </paper-checkbox>`;\n            }\n        }).map((filter) => html`<li>${filter}</li>`);\n        return html`<ul>\n            ${filterList}\n        </ul>`;\n    }\n\n    updateFilter(filter: Filter) {\n        return (e: Event) => {\n            filter.checked = !!((e.target as PaperCheckboxElement).checked);\n            if (filter.options && filter.options.length) {\n                for (const option of filter.options) {\n                    option.checked = filter.checked;\n                }\n            }\n            this.dispatchEvent(new CustomEvent(FilterEvent.CHECKED_CHANGED))\n            this.requestUpdate();\n        }\n    }\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'filter-source': FilterSourceElement;\n    }\n}\n"]}