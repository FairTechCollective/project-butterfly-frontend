{"version":3,"file":"filter-list.js","sourceRoot":"","sources":["src/filter-list.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,iBAAiB,CAAC;AAEzB,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAI1D,MAAM,cAAc,GAAG,EAAE,CAAC;AAE1B,MAAM,CAAN,IAAY,eAEX;AAFD,WAAY,eAAe;IACvB,gDAA2B,CAAA;AAC/B,CAAC,EAFW,eAAe,KAAf,eAAe,QAE1B;AAGD,IAAa,iBAAiB,GAA9B,MAAa,iBAAkB,SAAQ,UAAU;IAAjD;;QACY,UAAK,GAAgB,IAAI,CAAC;QAER,gBAAW,GAAG,IAAI,GAAG,EAAU,CAAC;QACjC,YAAO,GAAmB,EAAE,CAAC;IA8C1D,CAAC;IA1CY,MAAM;QACX,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAA;;2BAErB,MAAM,CAAC,MAAM;gCACR,IAAI,CAAC,WAAW;4BACpB,MAAM,CAAC,OAAO;oCACN,IAAI,CAAC,oBAAoB;;;SAGpD,CAAC,CAAC;IACP,CAAC;IAED,oBAAoB;QAChB,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE;YACpB,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;SAC3B;QACD,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;YAChC,IAAI,CAAC,aAAa,CACd,IAAI,WAAW,CAAc,eAAe,CAAC,YAAY,EAAE;gBACvD,MAAM,EAAE,IAAI,CAAC,YAAY,EAAE;aAC9B,CAAC,CAAC,CAAC;QACZ,CAAC,EAAE,cAAc,CAAC,CAAC;IACvB,CAAC;IAED,YAAY;QACR,MAAM,IAAI,GAAgB,IAAI,GAAG,EAAE,CAAC;QACpC,SAAS,YAAY,CAAC,OAAiB;YACnC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;gBAC1B,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE;oBACvB,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;iBAChC;qBAAM;oBACH,IAAI,MAAM,CAAC,OAAO,EAAE;wBAChB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACxB;iBACJ;aACJ;QACL,CAAC;QACD,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;YAC/B,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;SAC/B;QACD,OAAO,IAAI,CAAA;IACf,CAAC;CACJ,CAAA;AA5CmB,wBAAM,GAAG,GAAG,CAAA,EAAG,CAAA;AAHL;IAAzB,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;sDAAiC;AACjC;IAAxB,QAAQ,CAAC,EAAC,IAAI,EAAE,KAAK,EAAC,CAAC;kDAA8B;AAJ7C,iBAAiB;IAD7B,aAAa,CAAC,aAAa,CAAC;GAChB,iBAAiB,CAkD7B;SAlDY,iBAAiB","sourcesContent":["import './filter-source';\n\nimport {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\nimport {Filter, FilterSource} from './filter-source';\n\nconst DEBOUNCE_TIMER = 10;\n\nexport enum FilterListEvent {\n    TAGS_CHANGED='tags-changed',\n}\n\n@customElement('filter-list')\nexport class FilterListElement extends LitElement {\n    private timer: number|null = null;\n\n    @property({type: Object}) disableTags = new Set<string>();\n    @property({type: Array}) filters: FilterSource[] = [];\n\n    static override styles = css``;\n\n    override render() {\n        return this.filters.map((filter) => html`\n            <filter-source\n                .header=\"${filter.header}\"\n                .disableTags=\"${this.disableTags}\"\n                .filters=\"${filter.filters}\"\n                @checked-changed=\"${this.handleCheckedChanged}\"\n            >\n            </filter-source>\n        `);\n    }\n\n    handleCheckedChanged() {\n        if (this.timer != null) {\n            clearTimeout(this.timer)\n        }\n        this.timer = window.setTimeout(() => {\n            this.dispatchEvent(\n                new CustomEvent<Set<string>>(FilterListEvent.TAGS_CHANGED, {\n                    detail: this.getShownTags(),\n                }));\n        }, DEBOUNCE_TIMER);\n    }\n\n    getShownTags() {\n        const tags: Set<string> = new Set();\n        function findLeafTags(filters: Filter[]) {\n            for (const filter of filters) {\n                if (filter.options.length) {\n                    findLeafTags(filter.options);\n                } else {\n                    if (filter.checked) {\n                        tags.add(filter.tag);\n                    }\n                }\n            }\n        }\n        for (const filter of this.filters) {\n            findLeafTags(filter.filters)\n        }\n        return tags\n    }\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'filter-list': FilterListElement;\n    }\n}\n"]}